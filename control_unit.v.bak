module control_unit
(input [7:0] IR,
 input clk,
  
// output reg ARLD_BUS, ARLD_PC, PCLD, PCINC, DRLD, IRLD, RLD, TRLD, ACLD, ZLD, PCBUS, DRBUS, RBUS, 
// ACBUS, TRMEM, TROUT, DMEM_READ, DMEM_WRITE, IMEM_READ, TO_MEM, FROMMEM, MEM_SEL, CLRTR, CLRAC, 
// ACINC, ALU_PASS, END_OP, output reg [2:0] ALU_MODE, output reg[2:0] BUS_LD , output reg [7:0] REG_LD
// );

 output reg END_OP, output reg [1:0] INC, output reg [1:0] ALU_MODE, output reg[9:0] BUS_LD ,
 output reg [11:0] WRITE_EN, MEM_FUNC = 2'b00);

 parameter FETCH1 = 3'b001, FETCH2 = 3'b010, FETCH3 = 3'b011, EXEC1 = 3'b100, EXEC2 = 3'b101,
 EXEC3 = 3'b110, IDLE = 3'b111;

 reg stage = 3'b000;
 reg next_stage = 3'b000;
 
 //---------------------------------------------------------------------------
 
 //WRITE_EN 0   0  0  0  0  0  0    0    0     0    0      0
 //	   		ARB AR PC DR IR R TR  DMEM TOMEM CLRTR CLRAC CLRPC
 
  //BUS_LD 0     1     2  3  4  5    6   7   (Dec Val/3bit BINARY)0-->5 busread 
 //	     IMEMB DMEMB PC DR R  AC  TR
 
 
 //MEM_FUNC  0        1         2          (DEC VALS) 
 //          IMEMREAD DMEMREAD DMEMWRITE               WHEN DMEMREAD -> TOMEM = 0
																	//WHEN DMEMWRITE -> TOMEM = 1
 
  //INC  0  0 
    //  PC  AC
	 
 //---------------------------------------------------------------------------

 
 always @(posedge clk)
 begin
// next_stage <= FETCH1
 stage <= next_stage ;
 
 case (stage)
 FETCH1 :
 begin
 WRITE_EN <= 12'b010000000000 ;
 BUS_LD <= 3'b000 ;
 MEM_FUNC <= 2'b00 ;
 INC <= 2'b00;
 ALU_MODE <= 2'b00;
							 //ARLD <= 1'b1; LOAD FROM PC DIRECTLY
 next_stage <= FETCH2 ;
 END_OP <= 1'b0;
 end
 
 FETCH2:
 begin
 WRITE_EN <= 12'b000100000000 ;
 BUS_LD <= 3'b000 ; //0
 MEM_FUNC <= 2'b00 ;
 INC <= 2'b10;
 ALU_MODE <= 2'b00;
							// PCINC = 1'b1;
							// DRLD = 1'b1;
							// IMEMBUS = 1'b1;
 next_stage <= FETCH2 ;
 END_OP <= 1'b0;
 end
 
 FETCH3:
 begin
 WRITE_EN <= 12'b010010000000 ;
 BUS_LD <= 3'b011 ; //3
 MEM_FUNC <= 3'b000 ;
 INC <= 2'b10;
 ALU_MODE <= 2'b00;
								// IRLD = 1;
								// DRBUS = 1;
								 //ARLD <= 1'b1; LOAD FROM PC DIRECTLY 
 next_stage <= FETCH2 ;
 END_OP <= 1'b0;
 end
 
 EXEC1:
 begin
	case (IR[3:0])
	
	4'b0000:
	begin //LDAC
	WRITE_EN <= 12'b000010000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	BUS_IMEM = 1'b1;
							//	MEM_FUNC = 1'b0;
							//	DRLD = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;
	end
	
	4'b0001: 
	begin //MVACR
	WRITE_EN <= 12'b000001000000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;	
							//	BUSLD_AC = 1'b1;
							//	RLD = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;
	end
	 
	4'b0010:
	begin //ADDTR   IN AC
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b110 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;		
							//	BUSLD_TR = 1'b1;
							//	ALU_MODE = 2'b00;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;
	end
	 
	4'b0011: 
	begin //MVACTR
	WRITE_EN <= 12'b000000100000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;		
							//	BUSLD_AC = 1'b1;
							//	TRLD = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;
	end
		
	4'b0100:
	begin //STTR
	WRITE_EN <= 12'b000010000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	BUS_IMEM = 1'b1;
							//	MEM_FUNC = 1'b0;
							//	DRLD = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;	
	end
	
	4'b0101: //MULT
	begin 
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b100 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b01;
							//	BUSLD_R = 1'b1;
							//	ALU_MODE = 2'b01;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;
	end
	
	4'b0110: //SUB
	begin
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b100 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b10;
							//	BUSLD_R = 1'b1;
							//	ALU_MODE = 2'b01;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;	
	end
	
	4'b0111: //CLR
	begin
	WRITE_EN <= 12'b000000000110 ;
	BUS_LD <= 3'b100 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	CLRAC = 1'b1;
							//	CLRTR = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;	
	end
	
	4'b1000: //INCAC
	begin
	WRITE_EN <= 12'b000000000110 ;
	BUS_LD <= 3'b100 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b01;
	ALU_MODE <= 2'b00;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;	
	end
	
	4'b1001:	//JUMP
	begin
	WRITE_EN <= 12'b000010000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	BUS_IMEM = 1'b1;
							//	MEM_FUNC = 1'b0;
							//	DRLD = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;	
	end
	
	4'b1010:	//JUMPZ
	begin
	WRITE_EN <= 12'b000010000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	BUS_IMEM = 1'b1;
							//	MEM_FUNC = 1'b0;
							//	DRLD = 1'b1;
	next_stage <= EXEC2 ;
	END_OP <= 1'b0;	
	end
	
	4'b1011:	//JPNZ
	begin
	WRITE_EN <= 12'b000010000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	BUS_IMEM = 1'b1;
							//	MEM_FUNC = 1'b0;
							//	DRLD = 1'b1;
	next_stage <= EXEC2 ;	
	END_OP <= 1'b0;
	end
	
	4'b1100: //ENDOP
	begin
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
							//	stage = 4'b0000;
							//	next_stage = 4'b0000;
	END_OP <= 1'b1;
	next_stage <= IDLE ;		
	end
	
	default : //NOOP
	begin
	end
	
	endcase
	
 end
	
//-----------------------------------------
	
 EXEC2:
 begin
	case (IR[3:0])
	
	4'b0000:
	begin //LDAC
	WRITE_EN <= 12'b110000000000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b010 ;  // FOR EXEC3
	INC <= 2'b10;
	ALU_MODE <= 2'b00;
								//	BUSLD_DR = 1'b1;
								//	ARLD_BUS = 1'b0;
								//	PCINC = 1'b1;
	END_OP <= 1'b0;
	next_stage <= EXEC3 ;		
	end
	 
	4'b0100:
	begin //STTR
	WRITE_EN <= 12'b110000000000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b001 ;	//FOR EXEC3
	INC <= 2'b10;
	ALU_MODE <= 2'b00;
								//	BUSLD_DR = 1'b1;
								//	ARLD_BUS = 1'b0;
								//	PCINC = 1'b1;
	END_OP <= 1'b0;
	next_stage <= EXEC3 ;	
	end
	
	4'b1001:	//JUMP
	begin
	WRITE_EN <= 12'b001000000000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
								//	BUSLD_DR = 1'b1;
								//	BUSSLD_PC = 1'b0;
	END_OP <= 1'b0;
	next_stage <= EXEC3 ;		
	end
	
	4'b1010:	//JUMPZ
	begin
	WRITE_EN <= 12'b001000000000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
								//	BUSLD_DR = 1'b1;
								//	BUSSLD_PC = 1'b0;
	END_OP <= 1'b0;
	next_stage <= EXEC3 ;
	end
	
	4'b1011:	//JPNZ
	begin
	WRITE_EN <= 12'b001000000000 ;
	BUS_LD <= 3'b101 ;
	MEM_FUNC <= 3'b000 ;
	INC <= 2'b00;
	ALU_MODE <= 2'b00;
								//	BUSLD_DR = 1'b1;
								//	BUSSLD_PC = 1'b0;
	END_OP <= 1'b0;
	next_stage <= EXEC3 ;
	end
	
	default : //NOOP
	begin
	end
	endcase
	
 end
	
//-----------------------------------------
	
 EXEC3:
 begin
	case (IR[3:0])
	
	4'b0000:
	begin //LDAC
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b001 ;
	MEM_FUNC <= 3'b000 ;	//DMEM READ DONE IN EXEC2
	INC <= 2'b00;
	ALU_MODE <= 2'b11;
								//	DMEM_READ = 1'b1;
								//	ALU_PASS = 1'b1;
	next_stage <= FETCH1 ;
	END_OP <= 1'b0;	
	end
	 	
	4'b0100:
	begin //STTR --------------------- TR --> MEM
	WRITE_EN <= 12'b000000001000 ;
	BUS_LD <= 3'b110 ;
	MEM_FUNC <= 3'b000 ;	//DMEM READ WRITE IN EXEC2
	INC <= 2'b00;
	ALU_MODE <= 2'b11;
								//	TOMEM = 1'b1;
								//	TRLD_BUS = 1'b1;
	next_stage <= FETCH1 ;
	END_OP <= 1'b0;	
	end
	
	4'b1010:	//JUMPZ
	begin
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;	//DMEM READ WRITE IN EXEC2
	INC <= 2'b10;
	ALU_MODE <= 2'b00;
								//	PCINC = 1'b1;
	next_stage <= FETCH1 ;
	END_OP <= 1'b0;
	end
	
	4'b1011:	//JPNZ
	begin
	WRITE_EN <= 12'b000000000000 ;
	BUS_LD <= 3'b000 ;
	MEM_FUNC <= 3'b000 ;	//DMEM READ WRITE IN EXEC2
	INC <= 2'b10;
	ALU_MODE <= 2'b00;
								//	PCINC = 1'b1;
	next_stage <= FETCH1 ;
	END_OP <= 1'b0;
	end
	
	default : //NOOP
	begin
	end
	endcase

 end
 
 IDLE:
 begin
 next_stage <= IDLE ;
 
 WRITE_EN <= 12'b000000000000 ;
 BUS_LD <= 3'b000 ;
 MEM_FUNC <= 2'b00 ;
 INC <= 2'b00;
 ALU_MODE <= 2'b00;
 END_OP <= 1'b0;
 end
 
default:
 begin
 next_stage <= FETCH1;
 
 WRITE_EN <= 12'b000000000000 ;
 BUS_LD <= 3'b000 ;
 MEM_FUNC <= 2'b00 ;
 INC <= 2'b00;
 ALU_MODE <= 2'b00;
 END_OP <= 1'b0;
 
 
 end
endcase
end
endmodule

	
	
	
 